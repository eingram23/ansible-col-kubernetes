---
- name: Create staging folders
  ansible.builtin.file:
    path: "{{ dest }}"
    state: directory
    mode: '0755'

- name: Create vmware-system-csi k8s namespace
  kubernetes.core.k8s:
    name: vmware-system-csi
    api_version: v1
    kind: Namespace
    state: present

- name: Download files to host
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "{{ dest }}"
    mode: '0644'
  loop:
    - ccm-rbac.yaml
    - csi.yaml
    - storageclass.yaml

- name: Create templated files
  ansible.builtin.template:
    src: "{{ csi_item }}.j2"
    dest: "{{ dest }}{{ csi_item }}"
    mode: '0644'
  loop:
    - vsphere-cloud-secret.yaml
    - vsphere-cloud-config.yaml
    - csi-vsphere.conf
  loop_control:
    loop_var: csi_item

- name: Create secret from csi-vsphere.conf
  ansible.builtin.shell:
    cmd: >
      kubectl create secret generic vsphere-config-secret
      --namespace=vmware-system-csi
      --from-file={{ dest }}csi-vsphere.conf
      --dry-run=client
      -o yaml | kubectl apply -f -

- name: Deploy vsphere-csi manifests
  kubernetes.core.k8s:
    src: "{{ dest }}{{ item }}"
    state: present
  loop:
    - vsphere-cloud-secret.yaml
    - ccm-rbac.yaml
    - csi.yaml
    - vsphere-cloud-config.yaml
    - storageclass.yaml

- name: Set vsphere-csi as default storageclass
  ansible.builtin.shell: |
    storageclass_list=$(kubectl get storageclass | grep '(default)' | cut -d ' ' -f 1)
    CURRENT_IFS=$IFS
    IFS=$'\n' read -r -d '' -a array <<< "$storageclass_list"
    IFS=$CURRENT_IFS

    for (( i=0; i<${{ "{" }}{{ "#" }}array[@]}; i++ )) do
      if [ "${array[$i]}" != "vsphere-csi" ]; then
          kubectl patch storageclass "${array[$i]}" -p '{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class":"false"}}}'
        fi
    done
    kubectl patch storageclass vsphere-csi -p '{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class":"true"}}}'
  register: patch_result
  changed_when: patch_result.stdout != ""

- name: Debug patch result
  ansible.builtin.debug:
    msg: "{{ patch_result.stdout }}"
  when: patch_result.stdout != ""
