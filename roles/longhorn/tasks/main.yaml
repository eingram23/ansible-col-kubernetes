- name: Download longhorn-iscsi-install manifest
  ansible.builtin.get_url:
    url: "{{ iscsi_manifest_url }}"
    dest: "{{ dest }}{{ iscsi_manifest }}"
    mode: '0644'

- name: Deploy longhorn-iscsi-install DaemonSet
  kubernetes.core.k8s:
    state: present
    namespace: default
    src: "{{ dest }}{{ iscsi_manifest }}"
    kubeconfig: "{{ kubeconfig }}"

- name: Pause for 20 seconds
  ansible.builtin.pause:
    seconds: 20

- name: Download longhorn manifest
  ansible.builtin.get_url:
    url: "{{ longhorn_manifest_url }}"
    dest: "{{ dest }}{{ longhorn_manifest }}"
    mode: '0644'

- name: Deploy longhorn deployment
  kubernetes.core.k8s:
    state: present
    src: "{{ dest }}{{ longhorn_manifest }}"
    kubeconfig: "{{ kubeconfig }}"

- name: Wait for metallb pods become ready
  shell: "kubectl wait --namespace=longhorn-system --for=condition=Ready pods --all --timeout=600s"

- name: Remove longhorn-iscsi-install DaemonSet
  kubernetes.core.k8s:
    state: absent
    namespace: default
    kind: DaemonSet
    name: longhorn-iscsi-installation
    kubeconfig: "{{ kubeconfig }}"

- name: Delete default longhorn-frontend service so we can install new service with IngressRoute
  kubernetes.core.k8s:
    state: absent
    name: longhorn-frontend
    kind: service
    namespace: longhorn-system
    kubeconfig: "{{ kubeconfig }}"

- name: Copy longhorn manifests to host
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "{{ dest }}"
    mode: '0644'
  loop:
    - longhorn-ui.yaml
    - longhorn-storageclass.yaml

- name: Create longhorn ingress manifest on host
  ansible.builtin.template:
    src: longhorn-ingress.yaml.j2
    dest: "{{ dest }}longhorn-ingress.yaml"
    mode: '0644'

- name: Deploy longhorn UI, ingress and storageclass
  kubernetes.core.k8s:
    state: present
    src: "{{ dest }}{{ item }}"
    kubeconfig: "{{ kubeconfig }}"
  loop:
    - longhorn-ui.yaml
    - longhorn-ingress.yaml
    - longhorn-storageclass.yaml

- name: Make longhorn the default storage class
  ansible.builtin.shell: |
    kubectl patch storageclass local-path -p '{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class":"false"}}}'
    kubectl patch storageclass longhorn -p '{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class":"false"}}}'
