---
- name: Upgrade pip3 if needed
  ansible.builtin.pip:
    name: pip
    state: latest
  become: true
  become_method: sudo

- name: Install cryptography python module
  ansible.builtin.pip:
    name: "{{ pip_item }}"
  loop:
    - rust
    - setuptools_rust
    - cryptography
  loop_control:
    loop_var: pip_item
  # become: true
  # become_method: sudo

- name: Create vault k8s namespace
  kubernetes.core.k8s:
    name: vault
    api_version: v1
    kind: Namespace
    state: present
    kubeconfig: "{{ kubeconfig }}"

- name: Download files to host
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "{{ dest }}"
    mode: '0644'
  loop:
    - pki-policy.sh
    - vault-csr.conf
    - vault-values.yaml

- name: Create key for k8s to sign (for TLS Listener)
  community.crypto.openssl_privatekey:
    path: "{{ dest }}vault.key"
    type: RSA
    size: 2048

- name: Generate an OpenSSL csr
  ansible.builtin.shell:
    cmd: >
      openssl req -new -key {{ dest }}vault.key
      -subj "/O=system:nodes/CN=system:node:vault.vault.svc"
      -out {{ dest }}vault.csr
      -config {{ dest }}vault-csr.conf

- name: Extract vault.csr contents
  ansible.builtin.shell: |
    cat {{ dest }}vault.csr | base64 | tr -d '\r\n' > {{ dest }}vault.csr.contents

- name: get content of remote file
  slurp:
    src: "{{ dest }}vault.csr.contents"
  register: vault_csr_enc

- name: decode remote content
  set_fact:
    vault_csr: "{{ vault_csr_enc['content'] | b64decode }}"

- name: Create vault-csr.yaml file
  ansible.builtin.template:
    src: vault-csr.yaml.j2
    dest: "{{ dest }}vault-csr.yaml"

- name: Create csr and send to k8s
  kubernetes.core.k8s:
    state: present
    src: "{{ dest }}{{ item }}"
    kubeconfig: "{{ kubeconfig }}"
  loop:
    - vault-csr.yaml

- name: Approve cert Request
  ansible.builtin.shell:
    cmd: kubectl certificate approve vault-csr

- name: Retrieve cert, write out to file, retrieve k8s CA, create secret
  ansible.builtin.shell:
    cmd: |
      serverCert=$(kubectl get csr vault-csr -o jsonpath='{.status.certificate}')
      echo "${serverCert}" | openssl base64 -d -A -out {{ dest }}vault.crt
      kubectl config view --raw --minify --flatten -o jsonpath='{.clusters[].cluster.certificate-authority-data}' | base64 -d > {{ dest }}vault.ca
      kubectl create secret generic vault-server-tls --namespace vault --from-file=tls.key={{ dest }}vault.key --from-file=tls.crt={{ dest }}vault.crt --from-file=ca.crt={{ dest }}vault.ca

- name: Create vault ingressroutetcp
  ansible.builtin.template:
    src: vault-ingressroutetcp.yaml.j2
    dest: "{{ dest }}vault-ingressroutetcp.yaml"
    mode: '0644'

- name: Add hashicorp/vault chart repo
  kubernetes.core.helm_repository:
    name: hashicorp
    repo_url: "https://helm.releases.hashicorp.com"

- name: Install hashicorp/vault chart from repo
  kubernetes.core.helm:
    release_name: vault
    release_namespace: vault
    create_namespace: false
    chart_ref: hashicorp/vault
    chart_version: "{{ vault_helm_ver }}"
    wait: true
    update_repo_cache: true
    values_files: "{{ dest }}vault-values.yaml"
    kubeconfig: "{{ kubeconfig }}"

- name: Deploy vault ingressroutetcp
  kubernetes.core.k8s:
    state: present
    src: "{{ dest }}{{ item }}"
    kubeconfig: "{{ kubeconfig }}"
  loop:
    - vault-ingressroutetcp.yaml

- name: Wait until vault pod is scheduled
  kubernetes.core.k8s_info:
    kind: Pod
    wait: yes
    wait_condition:
      type: PodScheduled
      status: true
    name: vault-0
    namespace: vault
    wait_sleep: 10
    wait_timeout: 360
    kubeconfig: "{{ kubeconfig }}"

- name: Check to see if vault is already deployed
  kubernetes.core.k8s_info:
    kind: Pod
    name: vault-0
    namespace: vault
    kubeconfig: "{{ kubeconfig }}"
  register: vault_ready

- block:
    - name: Pause 30 seconds
      ansible.builtin.pause:
        seconds: 30

    - name: Init and export cluster-keys.json
      ansible.builtin.shell:
        cmd: |
          kubectl exec vault-0 -n vault -- vault operator init -key-shares=1 -key-threshold=1 -format=json > init-keys.json
  when: vault_ready | json_query('resources[0].status.conditions[?type==`ContainersReady`].status') | first | bool == false

- name: Unseal vault
  ansible.builtin.shell:
    cmd: |
      VAULT_UNSEAL_KEY=$(jq -r ".unseal_keys_b64[]" init-keys.json)
      kubectl exec vault-0 -n vault -- vault operator unseal $VAULT_UNSEAL_KEY

- ansible.builtin.shell:
    cmd: |
      cat init-keys.json | jq -r ".root_token" > root_token

- block:
    - name: Get content of remote file
      ansible.builtin.slurp:
        src: "root_token"
      register: root_token_enc

    - name: Decode remote content
      ansible.builtin.set_fact:
        root_token: "{{ root_token_enc['content'] | b64decode }}"
  tags:
    - always
    - show_token

- name: Configure vault pki
  ansible.builtin.shell:
    cmd: |
      kubectl exec vault-0 -n vault -- vault login {{ root_token }}
      # mount backend
      kubectl exec vault-0 -n vault -- vault secrets enable -path=pki_int pki
      # Configure Int CA
      kubectl exec vault-0 -n vault -- vault secrets tune -max-lease-ttl=43800h pki_int

- name: Set URL config and configure a role
  ansible.builtin.shell:
    cmd: |
      kubectl exec vault-0 -n vault -- vault write pki_int/config/urls issuing_certificates="https://vault.vault.svc.cluster.local:8200/v1/pki_int/ca" crl_distribution_points="https://vault.vault.svc.cluster.local:8200/v1/pki_int/crl"
      kubectl exec vault-0 -n vault -- vault write pki_int/roles/local-dot-lan allowed_domains=local.lan allow_subdomains=true max_ttl=72h

- name: Create pki policy
  ansible.builtin.shell:
    cmd: |
      kubectl exec vault-0 -n vault -- /bin/sh -c "`cat {{ dest }}pki-policy.sh`"

- name: Configure k8s auth
  ansible.builtin.shell:
    cmd: |
      kubectl exec vault-0 -n vault -- vault auth enable kubernetes
      kubectl exec vault-0 -n vault -- vault write auth/kubernetes/config kubernetes_host="https://kubernetes.default.svc.cluster.local:443"
      kubectl exec vault-0 -n vault -- vault write auth/kubernetes/role/issuer bound_service_account_names=issuer bound_service_account_namespaces=cert-manager policies=pki ttl=20m

- name: Unseal vault
  ansible.builtin.shell:
    cmd: |
      VAULT_UNSEAL_KEY=$(jq -r ".unseal_keys_b64[]" init-keys.json)
      kubectl exec vault-0 -n vault -- vault operator unseal $VAULT_UNSEAL_KEY
  tags:
    - never
    - unseal

- name: Generate Int CSR
  ansible.builtin.shell:
    cmd: |
      kubectl exec vault-0 -n vault -- vault write -format=json pki_int/intermediate/generate/internal common_name="Homelab{{ suffix }} local.lan Intermediate Authority" key_type="rsa" key_bits="2048" ou="Homelab" organization="Homelab{{ suffix }} Org" country="US" locality="Homelab" province="California" > vault_int{{ suffix }}_csr
      cat vault_int{{ suffix }}_csr | jq -r '.data.csr' > vault_int{{ suffix }}.csr

- name: Run certstrap tasks
  ansible.builtin.include_tasks: certstrap.yaml

- name: Show root_token
  ansible.builtin.debug:
    var: root_token
  tags:
    - never
    - show_token

- name: Closing comments
  ansible.builtin.debug:
    msg: |
      Log into {{ hostvar }} as ansible user
      Run following scripts in order:
        ./certstrap-init.sh ### Only if need to create root CA,
          otherwise copy existing Homelab_local.lan_Root_CA.* files to certstrap/out folder
        ./certstrap-sign-int.sh
        ./cat-certs.sh

      To create pfx:
        cd ~/certs
        scp ansible@k3s-dev1.local.lan:./certstrap/out/* ./
        openssl pkcs12 -export -out Homelab_local.lan_Root_CA.pfx -inkey Homelab_local.lan_Root_CA.key -in Homelab_local.lan_Root_CA.crt

      Log into Vault UI using {{ root_token }}
        Secrets -> pki_int -> Configuration -> Configure -> Set signed intermediate
        Paste in contents of Homelab_local.lan_Root_Int{{ suffix }}_CA.crt and Save
