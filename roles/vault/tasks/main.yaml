---
- name: Create staging folders
  ansible.builtin.file:
    path: "{{ dest }}"
    state: directory
    mode: '0755'

# - name: Upgrade pip3 if needed
#   ansible.builtin.pip:
#     name: pip
#     state: latest
#   become: true
#   become_method: sudo

# - name: Install python modules
#   ansible.builtin.pip:
#     name: "{{ pip_item }}"
#   loop:
#     - rust
#     - setuptools_rust
#     - cryptography
#   loop_control:
#     loop_var: pip_item
  # become: true
  # become_method: sudo

# - name: Install json_query
#   ansible.builtin.package:
#     name: jq
#     state: present

- name: Create vault k8s namespace
  kubernetes.core.k8s:
    name: vault
    api_version: v1
    kind: Namespace
    state: present
    # kubeconfig: "{{ kubeconfig }}"

- name: Download files to host
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "{{ dest }}"
    mode: '0644'
  loop:
    - ansible-policy.sh
    - pki-policy.sh
    - admins-policy.sh
    - vault-csr.conf
  tags:
    - update_vaultconf

# - name: Set vault-pvc storageclass (Dev)
#   ansible.builtin.set_fact:
#     storageclass: longhorn-homelab-dev
#   when: suffix == "-dev"

- name: Create vault-values file
  ansible.builtin.template:
    src: vault-values.yaml.j2
    dest: "{{ dest }}vault-values.yaml"
    mode: '0644'

- name: Create key for k8s to sign (for TLS Listener)
  community.crypto.openssl_privatekey:
    path: "{{ dest }}vault.key"
    type: RSA
    size: 2048

- name: Generate an OpenSSL csr
  ansible.builtin.shell:
    cmd: >
      openssl req -new -key {{ dest }}vault.key
      -subj "/O=system:nodes/CN=system:node:vault.vault.svc"
      -out {{ dest }}vault.csr
      -config {{ dest }}vault-csr.conf

- name: Extract vault.csr contents
  ansible.builtin.shell: |
    cat {{ dest }}vault.csr | base64 | tr -d '\r\n' > {{ dest }}vault.csr.contents

- name: get content of vault.csr.contents
  slurp:
    src: "{{ dest }}vault.csr.contents"
  register: vault_csr_enc

- name: decode vault.csr.contents
  set_fact:
    vault_csr: "{{ vault_csr_enc['content'] | b64decode }}"

- name: Create vault-csr.yaml file
  ansible.builtin.template:
    src: vault-csr.yaml.j2
    dest: "{{ dest }}vault-csr.yaml"

- name: Create csr and send to k8s
  kubernetes.core.k8s:
    state: present
    src: "{{ dest }}{{ item }}"
    # kubeconfig: "{{ kubeconfig }}"
  loop:
    - vault-csr.yaml

- name: Approve cert Request
  ansible.builtin.shell:
    cmd: kubectl certificate approve vault-csr

- name: Retrieve cert, write out to file, retrieve k8s CA
  ansible.builtin.shell:
    cmd: |
      serverCert=$(kubectl get csr vault-csr -o jsonpath='{.status.certificate}')
      echo "${serverCert}" | openssl base64 -d -A -out {{ dest }}vault.crt
      kubectl config view --raw --minify --flatten -o jsonpath='{.clusters[].cluster.certificate-authority-data}' | base64 -d > {{ dest }}vault.ca

- name: Get contents of vault.ca
  ansible.builtin.slurp:
    src: "{{ dest }}vault.ca"
  register: vault_ca_enc

- name: Decode vault.ca
  ansible.builtin.set_fact:
    vault_ca: "{{ vault_ca_enc['content'] | b64decode }}"

- name: Create vault-server-tls secret
  ansible.builtin.shell:
    cmd: >
      kubectl create secret generic vault-server-tls
      --namespace vault
      --save-config
      --dry-run=client
      --from-file=tls.key={{ dest }}vault.key
      --from-file=tls.crt={{ dest }}vault.crt
      --from-file=ca.crt={{ dest }}vault.ca
      -o yaml | kubectl apply -f -

- name: Create vault ingressroutetcp
  ansible.builtin.template:
    src: vault-ingressroutetcp.yaml.j2
    dest: "{{ dest }}vault-ingressroutetcp.yaml"
    mode: '0644'

- name: Add hashicorp/vault chart repo
  kubernetes.core.helm_repository:
    name: hashicorp
    repo_url: "https://helm.releases.hashicorp.com"

- name: Install hashicorp/vault chart from repo
  kubernetes.core.helm:
    release_name: vault
    release_namespace: vault
    create_namespace: false
    chart_ref: hashicorp/vault
    chart_version: "{{ vault_helm_ver }}"
    wait: true
    update_repo_cache: true
    values_files: "{{ dest }}vault-values.yaml"
    # kubeconfig: "{{ kubeconfig }}"

- name: Deploy vault ingressroutetcp
  kubernetes.core.k8s:
    state: present
    src: "{{ dest }}{{ item }}"
    # kubeconfig: "{{ kubeconfig }}"
  loop:
    - vault-ingressroutetcp.yaml

- name: Wait until vault pod is scheduled
  kubernetes.core.k8s_info:
    kind: Pod
    wait: yes
    wait_condition:
      type: PodScheduled
      status: true
    name: vault-0
    namespace: vault
    wait_sleep: 10
    wait_timeout: 360
    # kubeconfig: "{{ kubeconfig }}"

- name: Check to see if vault is already deployed
  kubernetes.core.k8s_info:
    kind: Pod
    name: vault-0
    namespace: vault
    # kubeconfig: "{{ kubeconfig }}"
  register: vault_ready

- name: Wait for vault container to be ready
  when: vault_ready | json_query('resources[0].status.conditions[?type==`ContainersReady`].status') | first | bool == false
  block:
    - name: Pause 30 seconds
      ansible.builtin.pause:
        seconds: 30

    - name: Init and export cluster-keys.json
      ansible.builtin.shell:
        cmd: |
          kubectl exec vault-0 -n vault -- vault operator init -key-shares=1 -key-threshold=1 -format=json > {{ dest }}init-keys.json

- name: Unseal vault
  ansible.builtin.shell:
    cmd: |
      VAULT_UNSEAL_KEY=$(jq -r ".unseal_keys_b64[]" {{ dest }}init-keys.json)
      kubectl exec vault-0 -n vault -- vault operator unseal $VAULT_UNSEAL_KEY

- name: Export root_token
  ansible.builtin.shell:
    cmd: |
      cat {{ dest }}init-keys.json | jq -r ".root_token" > {{ dest }}root_token

- name: Get contents of files
  # tags:
  #   - show_token
  #   - unseal
  block:
    - name: Get content of root_token
      ansible.builtin.slurp:
        src: "{{ dest }}root_token"
      register: root_token_enc

    - name: Decode remote content
      ansible.builtin.set_fact:
        root_token: "{{ root_token_enc['content'] | b64decode }}"

    - name: Get content of init-keys.json
      ansible.builtin.slurp:
        src: "{{ dest }}init-keys.json"
      register: init_keys_enc

    - name: Decode remote content
      ansible.builtin.set_fact:
        init_keys: "{{ init_keys_enc['content'] | b64decode }}"

- name: Configure vault pki
  ansible.builtin.shell:
    cmd: |
      kubectl exec vault-0 -n vault -- vault login {{ root_token }}
      # mount backend
      kubectl exec vault-0 -n vault -- vault secrets enable -path=pki_int pki
      # Configure Int CA
      kubectl exec vault-0 -n vault -- vault secrets tune -max-lease-ttl=43800h pki_int

- name: Set URL config and configure a role
  ansible.builtin.shell:
    cmd: |
      kubectl exec vault-0 -n vault -- vault write pki_int/config/urls issuing_certificates="https://vault.vault.svc.cluster.local:8200/v1/pki_int/ca" crl_distribution_points="https://vault.vault.svc.cluster.local:8200/v1/pki_int/crl"
      kubectl exec vault-0 -n vault -- vault write pki_int/roles/local-dot-lan allowed_domains=local.lan allow_subdomains=true max_ttl=8760h
      kubectl exec vault-0 -n vault -- vault write pki_int/roles/ycdisp-dot-net allowed_domains=ycdisp.net allow_subdomains=true max_ttl=8760h

- name: Create policies
  ansible.builtin.shell:
    cmd: |
      kubectl exec vault-0 -n vault -- /bin/sh -c "`cat {{ dest }}ansible-policy.sh`"
      kubectl exec vault-0 -n vault -- /bin/sh -c "`cat {{ dest }}pki-policy.sh`"
      kubectl exec vault-0 -n vault -- /bin/sh -c "`cat {{ dest }}admins-policy.sh`"
  tags:
    - update_vaultconf

- name: Configure auth
  ansible.builtin.shell:
    cmd: |
      kubectl exec vault-0 -n vault -- vault auth enable approle
      kubectl exec vault-0 -n vault -- vault write auth/approle/role/ansible token_num_uses=0 token_ttl=0m secret_id_num_uses=0 token_no_default_policy=false token_policies="ansible"
      kubectl exec vault-0 -n vault -- vault auth enable userpass
      kubectl exec vault-0 -n vault -- vault write auth/userpass/users/eingram password=temppassword policies=admins
      kubectl exec vault-0 -n vault -- vault auth enable kubernetes
      kubectl exec vault-0 -n vault -- vault write auth/kubernetes/config kubernetes_host="https://kubernetes.default.svc.cluster.local:443"
      kubectl exec vault-0 -n vault -- vault write auth/kubernetes/role/issuer bound_service_account_names=issuer bound_service_account_namespaces=cert-manager policies=pki ttl=20m
  tags:
    - update_vaultconf

- name: Unseal vault
  ansible.builtin.shell:
    cmd: |
      VAULT_UNSEAL_KEY=$(jq -r ".unseal_keys_b64[]" {{ dest }}init-keys.json)
      kubectl exec vault-0 -n vault -- vault operator unseal $VAULT_UNSEAL_KEY
  # tags:
  #   - unseal

- name: Generate Int CSR
  ansible.builtin.shell:
    cmd: |
      kubectl exec vault-0 -n vault -- vault write -format=json pki_int/intermediate/generate/internal common_name="Homelab{{ suffix }} local.lan Intermediate Authority" key_type="rsa" key_bits="2048" ou="Homelab" organization="Homelab{{ suffix }} Org" country="US" locality="Homelab" province="California" > {{ dest }}vault_int{{ suffix }}_csr
      cat {{ dest }}vault_int{{ suffix }}_csr | jq -r '.data.csr' > {{ dest }}vault_int{{ suffix }}.csr

- name: Get contents of vault_int.csr
  ansible.builtin.slurp:
    src: "{{ dest }}vault_int{{ suffix }}.csr"
  register: vault_int_csr_enc

- name: Decode vault_int_csr
  ansible.builtin.set_fact:
    vault_int_csr: "{{ vault_int_csr_enc['content'] | b64decode }}"

- name: Run tasks on certstrap host
  delegate_to: homenas.local.lan
  become: true
  become_method: sudo
  become_user: root
  block:
    - name: Install go
      ansible.builtin.package:
        name: go
        state: present

    - name: Create certstrap folder
      ansible.builtin.file:
        path: "{{ certstrap_dest }}"
        state: directory
        mode: '0700'

    - name: Clone certstrap git
      ansible.builtin.git:
        repo: https://github.com/square/certstrap
        dest: "{{ certstrap_dest }}"

    - name: Check if certstrap already installed
      stat:
        path: /usr/local/bin/certstrap
      register: certstrap_installed

    - name: Build certstrap
      when: not certstrap_installed.stat.exists
      ansible.builtin.shell:
        cmd: |
          cd {{ certstrap_dest }}
          go build
          chmod +x {{ certstrap_dest }}certstrap
          mv {{ certstrap_dest }}certstrap /usr/local/bin

    - name: Create certstrap subfolders
      ansible.builtin.file:
        path: "{{ certstrap_dest }}{{ item }}"
        state: directory
        mode: '0777'
      loop:
        - csr
        - out

    - name: Create vault.ca in certstrap out folder
      ansible.builtin.copy:
        content: "{{ vault_ca }}"
        dest: "{{ certstrap_dest }}/out/vault{{ suffix }}.ca"
        mode: '0644'

    - name: Create certstrap-sign-int.sh
      ansible.builtin.template:
        src: "{{ item }}.j2"
        dest: "{{ certstrap_dest }}{{ item }}"
        mode: 'u+x'
      loop:
        - certstrap-sign-int.sh

    - name: Copy scripts to host
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: "{{ certstrap_dest }}"
        mode: 'u+x'
      loop:
        - certstrap-init.sh

    - name: Copy csr to certstrap folder
      ansible.builtin.copy:
        content: "{{ vault_int_csr }}"
        dest: "{{ certstrap_dest }}csr/vault_int{{ suffix }}.csr"
        mode: '0644'

    - name: Create init-keys.json on remote host
      ansible.builtin.copy:
        content: "{{ init_keys }}"
        dest: "{{ certstrap_dest }}init-keys{{ suffix }}.json"

    - name: Create root_token on remote host
      ansible.builtin.copy:
        content: "{{ root_token }}"
        dest: "{{ certstrap_dest }}root_token{{ suffix }}"

- name: Create cert_manager vault issuer
  ansible.builtin.include_role:
    name: eingram23.kubernetes.cert_manager
    tasks_from: vault_issuer

# - name: Show root_token
#   ansible.builtin.debug:
#     var: root_token
  # tags:
  #   - never
  #   - show_token
  #   - unseal

- name: Closing comments
  ansible.builtin.debug:
    msg: |
      Log into homenas as ansible user
      Run following scripts in order:
        ./certstrap-init.sh ### Only if need to create root CA,
          otherwise copy existing Homelab_local.lan_Root_CA.* files to certstrap/out folder
        ./certstrap-sign-int.sh (enter required password)
        ./cat-certs.sh

      To create pfx (if needed):
        cd ~/certs
        scp ansible@k3s-dev1.local.lan:./certstrap/out/* ./
        openssl pkcs12 -export -out Homelab_local.lan_Root_CA.pfx -inkey Homelab_local.lan_Root_CA.key -in Homelab_local.lan_Root_CA.crt

      Log into Vault UI using {{ root_token }}
        Secrets -> pki_int -> Configuration -> Configure -> Set signed intermediate (or Import PEM)
        Paste in contents of Homelab_local.lan_Root_Int{{ suffix }}_CA.crt and Save
      Vault CLI
        vault read auth/approle/role/ansible/role-id # Only needed if using secrets engine for Ansible
        vault write -f auth/approle/role/ansible/secret-id # Only needed if using secrets engine for Ansible
