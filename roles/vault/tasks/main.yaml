---
- name: Download manifests to host
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "{{ dest }}"
    mode: '0644'
  with_fileglob: "*"

- name: Create vault ingress
  ansible.builtin.template:
    src: vault-ingress.yaml.j2
    dest: "{{ dest }}vault-ingress.yaml"
    mode: '0644'
    
- name: Add hashicorp/vault chart repo
  kubernetes.core.helm_repository:
    name: hashicorp
    repo_url: "https://helm.releases.hashicorp.com"

- name: Install hashicorp/vault chart from repo
  kubernetes.core.helm:
    release_name: vault
    release_namespace: vault
    create_namespace: true
    chart_ref: hashicorp/vault
    wait: true
    update_repo_cache: true
    values_files: "{{ dest }}vault-values.yaml"
    kubeconfig: "{{ kubeconfig }}"

- name: Deploy vault ingress
  kubernetes.core.k8s:
    state: present
    src: "{{ dest }}{{ item }}"
    kubeconfig: "{{ kubeconfig }}"
  loop:
    - vault-ingress.yaml

- name: Check to see if vault is already deployed
  kubernetes.core.k8s_info:
    kind: Pod
    name: vault-0
    namespace: vault
    field_selectors:
      - status.phase=Running
    kubeconfig: "{{ kubeconfig }}"
  register: vault_ready

- block:
    - name: Wait until vault pod is scheduled
      kubernetes.core.k8s_info:
        kind: Pod
        wait: yes
        wait_condition:
          type: PodScheduled
          status: true
        name: vault-0
        namespace: vault
        wait_sleep: 10
        wait_timeout: 360
        kubeconfig: "{{ kubeconfig }}"

    - name: Wait until vault container is ready to be unsealed
      kubernetes.core.k8s_info:
        kind: Pod
        name: vault-0
        namespace: vault
        field_selectors:
          - status.phase=Running
        kubeconfig: "{{ kubeconfig }}"
      register: vault_running
      until: vault_running | json_query('resources[0].status.containerStatuses[?name==`vault`].started') | first | bool
      retries: 10
      delay: 5

    - name: Init and export cluster-keys.json
      ansible.builtin.shell:
        cmd: |
          kubectl exec vault-0 -n vault -- vault operator init -key-shares=1 -key-threshold=1 -format=json > init-keys.json
  when: vault_ready | json_query('resources[0].metadata.name') | first != "vault-0"

- name: Unseal vault
  ansible.builtin.shell:
    cmd: |
      VAULT_UNSEAL_KEY=$(jq -r ".unseal_keys_b64[]" init-keys.json)
      kubectl exec vault-0 -n vault -- vault operator unseal $VAULT_UNSEAL_KEY

- ansible.builtin.shell:
    cmd: |
      cat init-keys.json | jq -r ".root_token" > root_token

- name: get content of remote file
  slurp:
    src: "root_token"
  register: root_token_enc

- name: decode remote content
  set_fact:
    root_token: "{{ root_token_enc['content'] | b64decode }}"

- name: Execute a command
  ansible.builtin.shell:
    cmd: |
      kubectl exec vault-0 -n vault -- vault login {{ root_token }} 
      kubectl exec vault-0 -n vault -- vault secrets enable pki
      kubectl exec vault-0 -n vault -- vault secrets tune -max-lease-ttl=8760h pki

- name: Unseal vault
  ansible.builtin.shell:
    cmd: |
      VAULT_UNSEAL_KEY=$(jq -r ".unseal_keys_b64[]" init-keys.json)
      kubectl exec vault-0 -n vault -- vault operator unseal $VAULT_UNSEAL_KEY
  tags: 
    - never
    - unseal

- name: Show root_token
  ansible.builtin.debug:
    var: root_token
  tags:
    - always
    - show_token
