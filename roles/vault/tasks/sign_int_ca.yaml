- name: Run tasks on certstrap host
  delegate_to: homenas.local.lan
  become: true
  block:
    - name: Install go
      ansible.builtin.package:
        name: go
        state: present

    - name: Remove certstrap folder if it exists
      ansible.builtin.file:
        path: "{{ certstrap_dest }}{{ cluster }}"
        state: absent

    - name: Create certstrap folder
      ansible.builtin.file:
        path: "{{ certstrap_dest }}{{ cluster }}"
        state: directory
        mode: '0755'

    - name: Clone certstrap git
      ansible.builtin.git:
        repo: https://github.com/square/certstrap
        dest: "{{ certstrap_dest }}{{ cluster }}"

    - name: Build certstrap
      ansible.builtin.shell:
        cmd: |
          cd {{ certstrap_dest }}{{ cluster }}
          go build
          chmod +x {{ certstrap_dest }}{{ cluster }}/certstrap

    - name: Create certstrap subfolders
      ansible.builtin.file:
        path: "{{ certstrap_dest }}{{ cluster }}/{{ item }}"
        state: directory
        mode: '0777'
      loop:
        - csr
        - out

    # - name: Create vault.ca in certstrap out folder
    #   ansible.builtin.copy:
    #     content: "{{ vault_ca }}"
    #     dest: "{{ certstrap_dest }}{{ cluster }}/out/vault{{ suffix }}.ca"
    #     mode: '0644'

    - name: Create certstrap-sign-int.sh
      ansible.builtin.template:
        src: "{{ item }}.j2"
        dest: "{{ certstrap_dest }}{{ cluster }}/{{ item }}"
        mode: 'u+x'
      loop:
        - certstrap-sign-int.sh

    - name: Copy scripts to host
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: "{{ certstrap_dest }}{{ cluster }}"
        mode: 'u+x'
      loop:
        - certstrap-init.sh

    - name: Copy csr to certstrap folder
      ansible.builtin.copy:
        content: "{{ vault_int_csr }}"
        dest: "{{ certstrap_dest }}{{ cluster }}/csr/vault_int{{ suffix }}.csr"
        mode: '0644'

    - name: Create init-keys.json on remote host
      ansible.builtin.copy:
        content: "{{ init_keys }}"
        dest: "{{ certstrap_dest }}{{ cluster }}/init-keys{{ suffix }}.json"

    - name: Create root_token on remote host
      ansible.builtin.copy:
        content: "{{ root_token }}"
        dest: "{{ certstrap_dest }}{{ cluster }}/root_token{{ suffix }}"

    - name: Create Homelab root cert on remote host
      ansible.builtin.copy:
        content: "{{ lookup('hashi_vault', 'secret/cert/rootca:crt') }}"
        dest: "{{ certstrap_dest }}{{ cluster }}/out/Homelab_local.lan_Root_CA.crt"
        mode: '0400'

    - name: Create Homelab rootca key on remote host
      ansible.builtin.copy:
        content: "{{ lookup('hashi_vault', 'secret/cert/rootca:key') }}"
        dest: "{{ certstrap_dest }}{{ cluster }}/out/Homelab_local.lan_Root_CA.key"
        mode: '0400'

    - name: Run certstrap to sign intermediate cert
      ansible.builtin.shell:
        cmd: |
          cd {{ certstrap_dest }}{{ cluster }}
          ./certstrap-sign-int.sh

    - name: Get contents of Homelab_local.lan_Root_Int{{ suffix }}_CA.crt
      ansible.builtin.slurp:
        src: "{{ certstrap_dest }}{{ cluster }}/out/Homelab_local.lan_Root_Int{{ suffix }}_CA.crt"
      register: vault_int_ca_enc

    # - name: Display Homelab_local.lan_Root_Int{{ suffix }}_CA.crt contents
    #   ansible.builtin.debug:
    #     msg: "{{ vault_int_ca_enc.content | b64decode }}"

    # - name: Closing comments
    #   ansible.builtin.debug:
    #     msg: |
    #       Log into homenas as ansible user
    #       Run following scripts in order:
    #         ./certstrap-init.sh ### Only if need to create root CA,
    #           otherwise copy existing Homelab_local.lan_Root_CA.* files to certstrap/out folder
    #         ./certstrap-sign-int.sh (enter required password)

    #       To create pfx (if needed):
    #         cd ~/certs
    #         scp ansible@k3s-dev1.local.lan:./certstrap/out/* ./
    #         openssl pkcs12 -export -out Homelab_local.lan_Root_CA.pfx -inkey Homelab_local.lan_Root_CA.key -in Homelab_local.lan_Root_CA.crt

    #       Log into Vault UI using {{ root_token }}
    #         Secrets -> pki_int -> Configuration -> Configure -> Import CA (or Import PEM)
    #         Paste in contents of Homelab_local.lan_Root_Int{{ suffix }}_CA.crt and Save
    #       Vault CLI
    #         vault read auth/approle/role/ansible/role-id # Only needed if using secrets engine for Ansible
    #         vault write -f auth/approle/role/ansible/secret-id # Only needed if using secrets engine for Ansible
