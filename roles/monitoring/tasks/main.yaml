---
# tags: grafana, alerts
- name: Download prometheus-operator bundle to host
  ansible.builtin.get_url:
    url: https://github.com/prometheus-operator/prometheus-operator/releases/download/{{ prom_oper_ver }}/bundle.yaml
    dest: "{{ dest }}prometheus-operator.yaml"
    mode: '0644'

- name: Download manifests to host
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "{{ dest }}"
    mode: '0644'
  with_fileglob: "*"

- name: Download grafana manifests to host
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "{{ dest }}"
    mode: '0644'
  with_fileglob: "{{ role_path }}/files/grafana/*"
  tags:
    - grafana
    - update_grafdash

- name: Download node-exporter manifests to host
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "{{ dest }}"
    mode: '0644'
  with_fileglob: "{{ role_path }}/files/node-exporter/*"
  tags:
    - node-exporter

- name: Download alertmanager manifests to host
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "{{ dest }}"
    mode: '0644'
  with_fileglob: "{{ role_path }}/files/alertmanager/*"
  tags:
    - alertmanager

- name: Download alert rules to host
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "{{ dest }}"
    mode: '0644'
  with_fileglob: "{{ role_path }}/files/alert-rules/*"
  tags:
    - update_alerts

- name: Create node-exporter daemonset manifest on host
  ansible.builtin.template:
    src: "{{ role_path }}/files/node-exporter/node-exporter-daemonset.yaml.j2"
    dest: "{{ dest }}node-exporter-daemonset.yaml"
    mode: '0644'

- name: Create vmware-exporter deployment manifest on host
  ansible.builtin.template:
    src: vmware-exporter-deployment.yaml.j2
    dest: "{{ dest }}vmware-exporter-deployment.yaml"
    mode: '0644'

- name: Create templated grafana manifests on host
  ansible.builtin.template:
    src: "{{ role_path }}/templates/grafana/{{ item }}.j2"
    dest: "{{ dest }}{{ item }}"
    mode: '0644'
  loop:
    - graf-datasource-secret-influx.yaml
    - grafana-admin-pass.yaml
    - grafana-ingressroute.yaml
  tags: grafana

- name: Create templated alertmanager manifests on host
  ansible.builtin.template:
    src: "{{ role_path }}/templates/alertmanager/{{ item }}.j2"
    dest: "{{ dest }}{{ item }}"
    mode: '0644'
  loop:
    - alertmanager-alertmanager-secret.yaml
    - alertmanager-ingressroute.yaml
  tags:
    - alertmanager

- name: Create vmware-exporter ingressroute manifests on host
  ansible.builtin.template:
    src: vmware-exporter-ingressroute.yaml.j2
    dest: "{{ dest }}vmware-exporter-ingressroute.yaml"
    mode: '0644'

- name: Create prometheus ingressroute manifests on host
  ansible.builtin.template:
    src: prometheus-ingressroute.yaml.j2
    dest: "{{ dest }}prometheus-ingressroute.yaml"
    mode: '0644'

- name: Create monitoring namespace
  kubernetes.core.k8s:
    state: present
    src: "{{ dest }}monitoring-namespace.yaml"
    kubeconfig: "{{ kubeconfig }}"

- name: Deploy prometheus operator using shell
  ansible.builtin.shell: kubectl apply --server-side -f {{ dest }}prometheus-operator.yaml

- name: Get configs from github
  tags:
    - update_promjobs
    - update_grafdash
  block:
    - name: Create github key
      ansible.builtin.template:
        src: ssh-key-git.key.j2
        dest: /var/tmp/ssh-key-git.key
        mode: '0400'

    - name: Pull down prometheus.yml from git
      ansible.builtin.git:
        repo: 'git@github.com:eingram23/configs.git'
        dest: /var/tmp/configs
        clone: true
        key_file: /var/tmp/ssh-key-git.key
        accept_hostkey: true

    - name: Create secret for additional prometheus jobs
      ansible.builtin.shell: >
        kubectl create secret generic scrape-configs
        --from-file=/var/tmp/configs/prometheus/prometheus.yml
        --dry-run=client
        --namespace=monitoring
        -o yaml >
        {{ dest }}prom-scrape-servers.yaml

- name: Create grafana dashboard configmaps from json files
  ansible.builtin.shell:
    kubectl create configmap {{ item }}-dash
      --namespace monitoring
      --save-config
      --dry-run=client
      --from-file=/var/tmp/configs/grafana/dashboards/{{ item }}.json
      -o yaml | kubectl apply --server-side -f -
  loop:
    - alertmanager
    - climate
    - energy
    - k3s
    - kube-state
    - longhorn
    - node-exporter-en-20201010
    - node-exporter
    - ups
    - vmware
    - windows
  tags: update_grafdash

  # - name: Read dashboard json file
  #   ansible.builtin.slurp:
  #     src: "/var/tmp/configs/grafana/dashboards/alertmanager.json"
  #   register: alertmanager_dash

  # - name: Create dashboard configmap
  #   kubernetes.core.k8s:
  #     state: present
  #     namespace: monitoring
  #     kubeconfig: "{{ kubeconfig }}"
  #     definition:
  #       apiVersion: v1
  #       kind: ConfigMap
  #       metadata:
  #         name: "alertmanager-dash"
  #         labels:
  #           grafana_dashboard: "1"
  #       data:
  #         alertmanager.json: |-
  #           {{ alertmanager_dash.content | b64decode }}

  # - name: Read dashboard json file
  #   ansible.builtin.slurp:
  #     src: "/var/tmp/configs/grafana/dashboards/climate.json"
  #   register: climate_dash

  # - name: Create dashboard configmap
  #   kubernetes.core.k8s:
  #     state: present
  #     namespace: monitoring
  #     kubeconfig: "{{ kubeconfig }}"
  #     definition:
  #       apiVersion: v1
  #       kind: ConfigMap
  #       metadata:
  #         name: "climate-dash"
  #         labels:
  #           grafana_dashboard: "1"
  #       data:
  #         climate.json: |-
  #           {{ climate_dash.content | b64decode }}

  # - name: Read dashboard json file
  #   ansible.builtin.slurp:
  #     src: "/var/tmp/configs/grafana/dashboards/energy.json"
  #   register: energy_dash

  # - name: Create dashboard configmap
  #   kubernetes.core.k8s:
  #     state: present
  #     namespace: monitoring
  #     kubeconfig: "{{ kubeconfig }}"
  #     definition:
  #       apiVersion: v1
  #       kind: ConfigMap
  #       metadata:
  #         name: "energy-dash"
  #         labels:
  #           grafana_dashboard: "1"
  #       data:
  #         energy.json: |-
  #           {{ energy_dash.content | b64decode }}

  # - name: Read dashboard json file
  #   ansible.builtin.slurp:
  #     src: "/var/tmp/configs/grafana/dashboards/node-exporter-en-20201010.json"
  #   register: node_exporter_en_20201010_dash

  # - name: Create dashboard configmap
  #   kubernetes.core.k8s:
  #     state: present
  #     namespace: monitoring
  #     kubeconfig: "{{ kubeconfig }}"
  #     definition:
  #       apiVersion: v1
  #       kind: ConfigMap
  #       metadata:
  #         name: "node-exporter-en-20201010-dash"
  #         labels:
  #           grafana_dashboard: "1"
  #       data:
  #         node-exporter-en-20201010.json: |-
  #           {{ node_exporter_en_20201010_dash.content | b64decode }}

  # - name: Read dashboard json file
  #   ansible.builtin.slurp:
  #     src: "/var/tmp/configs/grafana/dashboards/node-exporter.json"
  #   register: node_exporter_dash

  # - name: Create dashboard configmap
  #   kubernetes.core.k8s:
  #     state: present
  #     namespace: monitoring
  #     kubeconfig: "{{ kubeconfig }}"
  #     definition:
  #       apiVersion: v1
  #       kind: ConfigMap
  #       metadata:
  #         name: "node-exporter-dash"
  #         labels:
  #           grafana_dashboard: "1"
  #       data:
  #         node-exporter.json: |-
  #           {{ node_exporter_dash.content | b64decode }}

  # - name: Read dashboard json file
  #   ansible.builtin.slurp:
  #     src: "/var/tmp/configs/grafana/dashboards/ups.json"
  #   register: ups_dash

  # - name: Create dashboard configmap
  #   kubernetes.core.k8s:
  #     state: present
  #     namespace: monitoring
  #     kubeconfig: "{{ kubeconfig }}"
  #     definition:
  #       apiVersion: v1
  #       kind: ConfigMap
  #       metadata:
  #         name: "ups-dash"
  #         labels:
  #           grafana_dashboard: "1"
  #       data:
  #         ups.json: |-
  #           {{ ups_dash.content | b64decode }}

  # - name: Read dashboard json file
  #   ansible.builtin.slurp:
  #     src: "/var/tmp/configs/grafana/dashboards/vmware.json"
  #   register: vmware_dash

  # - name: Create dashboard configmap
  #   kubernetes.core.k8s:
  #     state: present
  #     namespace: monitoring
  #     kubeconfig: "{{ kubeconfig }}"
  #     definition:
  #       apiVersion: v1
  #       kind: ConfigMap
  #       metadata:
  #         name: "vmware-dash"
  #         labels:
  #           grafana_dashboard: "1"
  #       data:
  #         vmware.json: |-
  #           {{ vmware_dash.content | b64decode }}

  # - name: Read dashboard json file
  #   ansible.builtin.slurp:
  #     src: "/var/tmp/configs/grafana/dashboards/windows.json"
  #   register: windows_dash

  # - name: Create dashboard configmap
  #   kubernetes.core.k8s:
  #     state: present
  #     namespace: monitoring
  #     kubeconfig: "{{ kubeconfig }}"
  #     definition:
  #       apiVersion: v1
  #       kind: ConfigMap
  #       metadata:
  #         name: "windows-dash"
  #         labels:
  #           grafana_dashboard: "1"
  #       data:
  #         windows.json: |-
  #           {{ windows_dash.content | b64decode }}

  # - name: Read dashboard json file
  #   ansible.builtin.slurp:
  #     src: "/var/tmp/configs/grafana/dashboards/k3s.json"
  #   register: k3s_dash

  # - name: Create dashboard configmap
  #   kubernetes.core.k8s:
  #     state: present
  #     namespace: monitoring
  #     kubeconfig: "{{ kubeconfig }}"
  #     definition:
  #       apiVersion: v1
  #       kind: ConfigMap
  #       metadata:
  #         name: "k3s-dash"
  #         labels:
  #           grafana_dashboard: "1"
  #       data:
  #         k3s.json: |-
  #           {{ k3s_dash.content | b64decode }}

  # - name: Read dashboard json file
  #   ansible.builtin.slurp:
  #     src: "/var/tmp/configs/grafana/dashboards/kube-state.json"
  #   register: kube_state_dash

  # - name: Create dashboard configmap
  #   kubernetes.core.k8s:
  #     state: present
  #     namespace: monitoring
  #     kubeconfig: "{{ kubeconfig }}"
  #     definition:
  #       apiVersion: v1
  #       kind: ConfigMap
  #       metadata:
  #         name: "kube-state-dash"
  #         labels:
  #           grafana_dashboard: "1"
  #       data:
  #         kube-state.json: |-
  #           {{ kube_state_dash.content | b64decode }}

  # - name: Read dashboard json file
  #   ansible.builtin.slurp:
  #     src: "/var/tmp/configs/grafana/dashboards/longhorn.json"
  #   register: longhorn_dash

  # - name: Create dashboard configmap
  #   kubernetes.core.k8s:
  #     state: present
  #     namespace: monitoring
  #     kubeconfig: "{{ kubeconfig }}"
  #     definition:
  #       apiVersion: v1
  #       kind: ConfigMap
  #       metadata:
  #         name: "longhorn-dash"
  #         labels:
  #           grafana_dashboard: "1"
  #       data:
  #         longhorn.json: |-
  #           {{ longhorn_dash.content | b64decode }}

- name: Deploy prometheus job secret
  kubernetes.core.k8s:
    state: present
    src: "{{ dest }}{{ item }}"
    kubeconfig: "{{ kubeconfig }}"
  loop:
    - prom-scrape-servers.yaml
  tags: update_promjobs

- name: Clean up tmp files
  ansible.builtin.file:
    path: /var/tmp/configs
    state: absent
  tags: update_promjobs

- name: Clean up key
  ansible.builtin.file:
    path: /var/tmp/ssh-key-git.key
    state: absent
  tags: update_promjobs

- name: Deploy monitoring manifests
  kubernetes.core.k8s:
    state: present
    src: "{{ dest }}{{ item }}"
    kubeconfig: "{{ kubeconfig }}"
  loop:
    - longhorn-servicemonitor.yaml
    - kubelet-servicemonitor.yaml
    - kube-state-metrics-role.yaml
    - kube-state-metrics-service.yaml
    - kube-state-metrics-deployment.yaml
    - kube-state-metrics-servicemonitor.yaml
    - kubelet-servicemonitor.yaml
    - traefik-servicemonitor.yaml
    - prom-scrape-servers.yaml

- name: Create prometheus manifest
  ansible.builtin.template:
    src: prometheus.yaml.j2
    dest: "{{ dest }}prometheus.yaml"
    mode: '0644'

- name: Deploy node-exporter
  kubernetes.core.k8s:
    state: present
    src: "{{ dest }}{{ item }}"
    kubeconfig: "{{ kubeconfig }}"
  loop:
    - node-exporter-role.yaml
    - node-exporter-service.yaml
    - node-exporter-daemonset.yaml
    - node-exporter-servicemonitor.yaml

- name: Deploy prometheus
  kubernetes.core.k8s:
    state: present
    src: "{{ dest }}{{ item }}"
    kubeconfig: "{{ kubeconfig }}"
  loop:
    - prometheus.yaml
    - prometheus-service-ext.yaml
    - prometheus-service-local.yaml
    - prometheus-role.yaml
    - prometheus-ingressroute.yaml

- name: Deploy vmware-exporter
  kubernetes.core.k8s:
    state: present
    src: "{{ dest }}{{ item }}"
    kubeconfig: "{{ kubeconfig }}"
  loop:
    - vmware-exporter-deployment.yaml
    - vmware-exporter-service.yaml
    - vmware-exporter-ingressroute.yaml

- name: Deploy alertmanager and rules
  kubernetes.core.k8s:
    state: present
    src: "{{ dest }}{{ item }}"
    kubeconfig: "{{ kubeconfig }}"
  loop:
    - alertmanager-alertmanager.yaml
    - alertmanager-alertmanager-secret.yaml
    - alertmanager-service.yaml
    - alertmanager-ingressroute.yaml
  tags:
    - alertmanager

- name: Deploy prometheus alert rules
  kubernetes.core.k8s:
    state: present
    src: "{{ dest }}{{ item }}"
    kubeconfig: "{{ kubeconfig }}"
  loop:
    - alertmanager-rules.yaml
    - node-exporter-rules.yaml
    - general-rules.yaml
    - etcd-rules.yaml
    - kube-prometheus-rules.yaml
    - prometheus-rules.yaml
  tags:
    - update_alerts

- name: Deploy grafana secret and ingressroute
  kubernetes.core.k8s:
    state: present
    src: "{{ dest }}{{ item }}"
    kubeconfig: "{{ kubeconfig }}"
  loop:
    - grafana-ingressroute.yaml
    - grafana-admin-pass.yaml
  tags: grafana

- name: Add grafana/grafana chart repo
  kubernetes.core.helm_repository:
    name: grafana
    repo_url: "https://grafana.github.io/helm-charts"
  tags: grafana

- name: Install grafana/grafana chart from repo
  kubernetes.core.helm:
    release_name: grafana
    release_namespace: monitoring
    create_namespace: false
    chart_ref: grafana/grafana
    chart_version: "{{ grafana_helm_ver }}"
    wait: true
    update_repo_cache: true
    values_files: "{{ dest }}grafana-values.yaml"
    kubeconfig: "{{ kubeconfig }}"
  tags: grafana

- name: Deploy grafana datasource resources
  kubernetes.core.k8s:
    state: present
    src: "{{ dest }}{{ item }}"
    kubeconfig: "{{ kubeconfig }}"
  loop:
    # - graf-dash-cm-climate.yaml
    # - graf-dash-cm-energy.yaml
    # - graf-dash-cm-windows.yaml
    # - graf-dash-cm-node-exporter.yaml
    # - graf-dash-cm-node-exporter-en-20201010.yaml
    # - graf-dash-cm-vmware.yaml
    # - graf-dash-cm-kube-state.yaml
    # - graf-dash-cm-longhorn.yaml
    # - graf-dash-cm-ups.yaml
    # - graf-dash-cm-k3s.yaml
    - graf-datasource-secret-influx.yaml
    - graf-datasource-cm-prom.yaml
  tags:
    - grafana
